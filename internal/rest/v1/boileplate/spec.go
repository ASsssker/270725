// Package boilerplate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package boilerplate

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWwW7jNhD9FWLaI2XZ7faiWwq0iwB76KG3wlgw4lhhTJEMOXLiGvr3giM5TmylTR03",
	"aIGeZAzNGb437w25g9q3wTt0lKDaQapvsVX88+qX6/wJ0QeMZJCDKpj8oW1AqCBRNK4BCY9F44scLNLa",
	"hMIHMt4pWwRvHGGEimKHfS/3G/3NHdYEvYSfYvTxtI7GVEfDaU7r9RIwb/tae43PlnOtBiNMFvrZWPxi",
	"3PrarfxpPWvc+nxgEhIp6jgTuq6F6jdw+AASjPsaoq8xJZBMtUVCDSMAWMoLUvmrSutTZCtjMX0Z4RnC",
	"lqPfRlxBBd+Uh/aXY+/LF0wdCqkY1fZvUGL02YTmv/k2HzbQFqqVsmkKcg6ZsZ1kyOa1300IGEHCBmNi",
	"9cBiNp/NMxAf0LGA4fvZfLYACUHRLfNRpgfVZO1UO2iQTiSYg9kQnCSqHLzWUMHnfThiCt6lgfPv5vP8",
	"qb0jdDT4JlhT877yLg2iHvj+q27k9Iz05Xl4GYVxgtP1Ej7NP12s6ODKibLOk1j5zmmB418kpK5tVdxC",
	"BRGpiy7xkYQKRjzfLIFUk7I19lwv8+6SRtm+Sru1WdlpkvvD2rsa8CZfsL+O/TDBUQaUhDWJjuhpkISy",
	"VtB45D0fzMCylxB8muDgSmsufYz/ED/CvriYDgbIpxCvtEbNOEQ2YGw5eSbnhwtK/1UV8qhwyoqEcYNx",
	"Uot1REUoHD7wOU/p3muv3Bnd/5kAJ8n//BQPKqoWCWNOvpvQgjCabwKoeN6ABKdavq9y/EDF+aNSBVPk",
	"u7BBV+AjRVUMWHewUdZoRcjmvO9MRJ0JXf6DA+s1zdBonw+ZU8z707D6VwkzT4E3KLLcP0mmh4LSmi/1",
	"iaEwxv+zurzvMNGPXm/PG+GXfNhNPbOOx3//zvn7/jfZhBAzbKHylB4s9wHav1FajM373+ZsUMFdID9p",
	"d8k9Stn2eR8nGpzaRQsVlCqYcrMooV/2fwQAAP//2T6ugaYNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
