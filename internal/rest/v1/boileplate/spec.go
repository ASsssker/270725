// Package boilerplate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package boilerplate

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTY/jNgz9KwLboz1O2u3FtynQLgbYQ1H0VgQLrcU42siSVqIzmw383wvRzuTDnu00",
	"SQdt0ZMDSqLIx/dIZQeVa7yzaClCuYNYrbCR/PP+l4f08cF5DKSRjdLr9KGtRyghUtC2hgw+57XLkzGP",
	"a+1z50k7K03unbaEAUoKLXZdtj/oPnzEiqDL4KcQXBjfozBWQbOby+/LAJP395VTeOQlbakxXBX2z9rg",
	"O23XD3bpxtEbbdfXhB1JUsue0LYNlL+DxUfIQNv3PrgKY4SMC2eQUMGQJyyyGxbmNxnX48yW2mB8N6Sn",
	"CRu2fhtwCSV8UxzIVAxMKk6QOlwkQ5DbvwCJVhcDmra5JgXraQvlUpo4lXIy6aGcpMmktS/ae2bKBkNk",
	"LsL8bnY3S4k4j5blAN/fze7mkIGXtGI8ivgo60Sxcgc10ojQyZjkxU6CTMYHBSW83ZsDRu9s7DH/bjZL",
	"n8pZQku9Cr3RFZ8rPsZeIj3ef1aN5J4zPY2Hl1FoK9hdl8Gb2ZubXdprfOJa60gsXWuVwGFLBrFtGhm2",
	"UEJAaoONHJKQXovjwxmQrGOSxh7rRTpd0EDbZ2E3JjE7TmJ/WLuqAC/SBevrXA8TGKWEojA60hk8NZKQ",
	"xggaQt7jwQgsugy8ixMY3CvFV5/nf7Cf5T6/GQ/6lMcp3iuFivMQSYChYecJnB9uSP1nWcitwkojIoYN",
	"hkkuVgElobD4yHGO4d5zr9hp1X2NgJPgv32yexlkg4QhOd9NcEFoxZMASu43kIGVDY+1ZD9AcXmrlF7n",
	"aWTWaHP8TEHmfa472EijlSRkcX5qdUCVAF38jQ3rOc7QIJ9X6VOM+1Oz+kcRM3WBFzCy2D9JppuCVIqH",
	"+kRTGOz/Wl5+ajHSj05tL2vht3zYTT2zztt/d2X/vf5NNkHElLaQqUv3knsF7n+QSgzF+1/mLFDBVSA3",
	"KfeMaxRHsg8YW0Nfm0e/9jsmJtLTyn9/Jn3R/rSQ/Ssk8VDbVIHzf1ZT7FmhkKFa6Q2KpcHXZW1f52Py",
	"ntDneM8Q45hBA1cWfEfPxb7gbTBQQiG9LjbzArpF90cAAAD//9nRDuU3EAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
